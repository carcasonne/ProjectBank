@page "/projects/create"
@using ProjectBank.Infrastructure.Generator;
@using ProjectBank.Core;
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Create Project</PageTitle>

<h1>Create Project</h1>

<AuthorizeView Context="authContext">
    <Authorized>

        <EditForm Model="@project" OnValidSubmit="@HandleValidSubmit" class="pb-4" Context="formContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Title">Title</label>
                <InputText id="Title" @bind-Value="project.Title" class="form-control" />
            </div>
            <div class="form-group">
                <label for="Description">Description</label>
                <InputTextArea id="Description" @bind-Value="project.Description" class="form-control" rows="7"/>
            </div>

            <div class="form-group">
                <label for="MaxStudents">Max Students</label>
                <InputNumber id="MaxStudents" class="form-control" @bind-Value="project.MaxStudents" min="0"/>
            </div>

            <div class="form-group mt-4">
            <button type="button" class="btn btn-sm btn-primary" @onclick="() => GetTags()">Generate Tags</button>  
                <div class="TagContainer">
                    <ul>
                        @foreach (var name in AllTags)
                        {
                            <li>
                                @name;
                            </li>
                        }
                    </ul>
                </div>
                <div class="NewTagContainer">
                    <div class="row w-50">
                        <div class="col-7">
                            <input type="text" class="form-control" id="TagCreateForm" placeholder="Enter tag" @bind="NewTag">
                        </div>
                        
                        <div class="col-4">
                            <button type="button" class="btn btn-success" @onclick="() => AddTagToList()"><i class="oi oi-plus"></i></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-4">
                            @if(TagWarning != string.Empty)
                            {
                                <div class="alert alert-danger m-0 mt-2" role="alert">
                                    @TagWarning
                                </div>
                            } 
                        </div>
                    </div>
                </div>
            </div>

            <!-- Code for binding database entries to a selection taken from
                https://www.pragimtech.com/blog/blazor/blazor-select-bind-database-data/
            -->
            <InputSelect id="Categories" class="mt-2 form-control" @bind-Value="project.CategoryID">
                @foreach (var category in AllCategories)
                {
                    <option value="@category.Id">@category.Title</option>
                }
            </InputSelect>

            <div class="row">&#8205;</div>

            <div class="form-group">
                <div>Project visibility</div>
                <InputRadioGroup @bind-Value="project.Status">
                    <InputRadio id="Public" Value="ProjectStatus.PUBLIC" class="form-check-input" /><label class="form-check-label" for="Public">Public</label>
                    <InputRadio id="Private" Value="ProjectStatus.PRIVATE" class="form-check-input" /><label class="form-check-label" for="Private">Private</label>
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <p>If you choose to create a private project, it will not be visible to other users on their dashboard, unless you invite them as a student or collaborator.</p>
            </div>
            <div class="form-group">
                <br />
                <button type="button" class="btn btn-primary" @onclick="Cancel">Return</button>
                <button type="submit" class="btn btn-secondary" @onclick="Save">Save</button>
                <button type="submit" class="btn btn-success btn-block">Post</button>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        You must be logged in to create a project
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ProjectCreateDTO project = new();
    private TagGenerator tagGenerator = new TagGenerator();
    private ISet<string> AllTags = new HashSet<string>();
    private ISet<string> CreatedTags = new HashSet<string>();
    private ICollection<CategoryDTO> AllCategories = new List<CategoryDTO>();
    private UserDTO Author;
    private string NewTag = string.Empty;
    private string TagWarning = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.AllCategories = await GetAllCategories();
            this.Author = await GetCurrentUser();
        }
        catch (Exception exception)
        {
            Console.WriteLine(":((( {0}",exception.Message);
        }

        project.CategoryID = 1;
    }
    private async Task HandleValidSubmit()
    {   
        if(AllTags.Count() <= 0)
        {
            TagWarning = "A project must have at least one tag";
            return;
        }

        TagWarning = string.Empty;

        project.TagIDs = new List<int>();

        project.UserIDs = new List<int>();
        project.BucketIDs = new List<int>();
        project.AuthorID = Author.Id;
        project.Status = project.Status;

        foreach (var item in AllTags)
        {
            //post user generated tag
            TagCreateDTO newTag = new TagCreateDTO{Name = item};
            var tagResponse = await Http.PostAsJsonAsync("api/Tag", newTag);

            //add to project to post
            if (tagResponse.IsSuccessStatusCode)
            {
                var created = await tagResponse.Content.ReadFromJsonAsync<TagDTO>();
                project.TagIDs.Add(created.Id);
            }
        }

        var response = await Http.PostAsJsonAsync("api/Projects/Post", project);
        if (response.IsSuccessStatusCode)
        {   
            var created = await response.Content.ReadFromJsonAsync<ProjectDTO>();

            var uri = $"{NavigationManager.BaseUri}projects/{created?.Id}";

            NavigationManager.NavigateTo(uri);
        }
    }

    private void Cancel()
    {
        var uri = $"{NavigationManager.BaseUri}projects";

        NavigationManager.NavigateTo(uri);
    }

    private void Save()
    {
        project.Status = ProjectStatus.DRAFT;
    }

    private async void GetTags()
    {
        tagGenerator = new TagGenerator();

        var TagDTOs = await Http.GetFromJsonAsync<ICollection<TagDTO>>($"api/Tag");
        var TagNames = TagDTOs.Select(t => t.Name).ToList();

        tagGenerator.Add(TagNames);
        tagGenerator.Add(CreatedTags);
        tagGenerator.Build();

        AllTags = tagGenerator.Find(project.Description).ToHashSet();
        StateHasChanged();
    }

    private void AddTagToList()
    {
        if(NewTag != "")
        {
            CreatedTags.Add(NewTag);
            AllTags.UnionWith(CreatedTags);
            
            TagWarning = string.Empty;

            StateHasChanged();
        }
    }

    //this will probably not be very smart in case of a lot of categories existing. Limit to a small number? Optimal would be to add search method
    private async Task<ICollection<CategoryDTO>> GetAllCategories()
    {
        return await Http.GetFromJsonAsync<ICollection<CategoryDTO>>($"api/Categories");
    }

    private async Task<UserDTO> GetCurrentUser()
    {
        var AuthState = await authenticationStateTask;
        var email = AuthState.User.Claims.First(c => c.Type.ToString() == "email").Value; 

        var user = await Http.GetFromJsonAsync<UserDTO>($"api/Users/Mail/{email}");

        return user;
    }
}
